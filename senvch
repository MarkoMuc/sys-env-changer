#!/usr/bin/env python
import argparse, os, getpass
from collections import namedtuple

PATH_TO_DIR = None

PATH_TO_FILE = "./test/config.sh"

def fill_dictionary(file_path) :
    #For every path in $HOME/.config/senvch/
    if os.path.exists(file_path)
    env_vars = {}
    
    with open(file_path, 'r') as file:
        lines = file.readlines()

    for i, line in enumerate(lines) :
        parts = line.strip().split('=', 1)
        if len(parts) == 2 :
            var_name = parts[0]
            parts = parts[1].strip().split("#", 1) 
            var_curr_value = parts[0]
            parts = parts[1].strip().split("&&&", 2) 
            if len(parts) == 3 :
                var_script = parts[0]
                var_description = parts[1]
                var_values = parts[2]
                Input = namedtuple('Input',['var_index','var_script', 'var_curr_value', 'var_description', 'var_values'])
                env_vars[var_name] = Input(var_index=i, var_script = var_script, var_curr_value = var_curr_value,
                                        var_description = var_description, var_values = var_values)
            else :
                print("ERROR IN DESCRIPTION!")
                exit(-1)
        else :
            print("ERROR IN VALUE DECLARATION!")
            exit(-1)
    return env_vars

def replace_line(file_path, env_variable, replace_value, line_index):
    
    with open(file_path, 'r') as file:
        lines = file.readlines()

    # If the line was found, replace it
    if line_index is not None:
        descrp = lines[line_index].strip().split('#', 1)
        new_line = f'{env_variable}={replace_value} #{descrp[1]}\n'
        old_line = lines[line_index]
        lines[line_index] = new_line

        # Write the updated content back to the file
        with open(file_path, 'w') as file:
            file.writelines(lines)

        print("Line replaced successfully. Old value : ", old_line)
    else:
        print("Line not found in the file.")

def make_help(env_dict) :
    help_string = ""
    
    for key, value in env_dict.items():
        help_string += f'\t{key} - from: {value.var_script} | current value: {value.var_curr_value} | description : {value.var_description} | values: {value.var_values}.\n'
    
    return help_string

def create_config():
    #Create folder $HOME/.config/senvch
    path_home = os.getenv('HOME', f'/home/{getpass.getuser()}')
    path_home = path_home[:-1] if path_home[- 1] == '/' else path_home 
    path_home += '/.config/senvch'
    os.makedirs(path_home)
    return path_home


if __name__ == "__main__":
    path_config = create_config()
    



    if PATH_TO_DIR == None :
        print('Please call senvch -d <directory path>, <directory path> is where the configuration for senvch will be saved!')
    
    env_dict = fill_dictionary(file_path=PATH_TO_FILE)
    
    parser = argparse.ArgumentParser(description="Parses arguments to run", formatter_class=argparse.RawTextHelpFormatter, 
                                     epilog="All environmental variables: \n" + make_help(env_dict=env_dict))
    parser.add_argument("variable", type=str, help="Variable to change")
    parser.add_argument("value", type=str, help="Value to change to")
    parser.add_argument("-d","dir", type=str, help="")

    args = parser.parse_args()
    
    info = env_dict.get(args.variable, "unknown")
    
    if info != "unknown" :
        replace_line(file_path=PATH_TO_FILE, env_variable=args.variable, replace_value=args.value, line_index=info.var_index)
    else :
        print(f'Variable {args.variable} does not exist!')
        exit(-1)
    
    exit(0)
